"""
lanceur_analyses.py
Script de lancement principal pour toutes les analyses de donn√©es.
Permet d'ex√©cuter les analyses de mani√®re orchestr√©e et interactive.
"""
import os
import sys
import subprocess
import time
from pathlib import Path

# Configuration
EXTRACTED_CSV_DIR = './extracted_csv'
SCRIPTS_DIR = '.'

def check_prerequisites():
    """V√©rifie les pr√©requis pour l'ex√©cution des analyses."""
    print("üîç V√©rification des pr√©requis...")
    
    # V√©rifier que le dossier extracted_csv existe
    if not Path(EXTRACTED_CSV_DIR).exists():
        print(f"‚ùå Le dossier {EXTRACTED_CSV_DIR} n'existe pas.")
        print("üí° Veuillez d'abord ex√©cuter extract.py pour extraire les fichiers compress√©s.")
        return False
    
    # V√©rifier qu'il y a des fichiers CSV
    csv_files = list(Path(EXTRACTED_CSV_DIR).rglob("*.csv"))
    if not csv_files:
        print(f"‚ùå Aucun fichier CSV trouv√© dans {EXTRACTED_CSV_DIR}")
        print("üí° Veuillez d'abord ex√©cuter extract.py pour extraire les fichiers compress√©s.")
        return False
    
    print(f"‚úÖ {len(csv_files)} fichier(s) CSV trouv√©(s)")
    return True

def list_available_scripts():
    """Liste les scripts d'analyse disponibles."""
    scripts = {
        '1': {
            'name': '2_exploration_csv.py',
            'description': 'Exploration de base des donn√©es CSV',
            'output_dir': './exploration_results'
        },
        '2': {
            'name': '3_analyse_complete.py',
            'description': 'Analyse compl√®te avec aper√ßu g√©n√©ral',
            'output_dir': 'analyse_complete'
        },
        '3': {
            'name': '4_analyse_statistique.py',
            'description': 'Analyses statistiques avanc√©es (corr√©lations, outliers, distributions)',
            'output_dir': 'analyses_statistiques'
        },
        '4': {
            'name': '5_analyse_categorielle.py',
            'description': 'Analyses des variables cat√©gorielles (distributions, associations)',
            'output_dir': 'analyses_categorielles'
        },
        '5': {
            'name': '6_analyse_temporelle.py',
            'description': 'Analyses temporelles et s√©ries temporelles',
            'output_dir': 'analyses_temporelles'
        }
    }
    return scripts

def display_menu():
    """Affiche le menu principal."""
    print("\n" + "="*60)
    print("üìä LANCEUR D'ANALYSES DE DONN√âES")
    print("="*60)
    
    scripts = list_available_scripts()
    
    print("\nüìã Scripts d'analyse disponibles :")
    for key, script in scripts.items():
        print(f"  {key}. {script['name']}")
        print(f"     {script['description']}")
        print(f"     üìÅ Sortie : {script['output_dir']}")
        print()
    
    print("üéØ Options sp√©ciales :")
    print("  A. Ex√©cuter TOUTES les analyses (s√©quentiellement)")
    print("  Q. Quitter")
    print()

def run_script(script_name):
    """Ex√©cute un script d'analyse."""
    script_path = os.path.join(SCRIPTS_DIR, script_name)
    
    if not os.path.exists(script_path):
        print(f"‚ùå Script non trouv√© : {script_path}")
        return False
    
    print(f"üöÄ Ex√©cution de {script_name}...")
    print("-" * 40)
    
    start_time = time.time()
    
    try:
        # Ex√©cuter le script
        result = subprocess.run([sys.executable, script_path], 
                              capture_output=True, text=True, cwd=SCRIPTS_DIR)
        
        # Afficher la sortie
        if result.stdout:
            print(result.stdout)
        if result.stderr:
            print("‚ö†Ô∏è Avertissements/Erreurs :")
            print(result.stderr)
        
        execution_time = time.time() - start_time
        
        if result.returncode == 0:
            print(f"‚úÖ {script_name} ex√©cut√© avec succ√®s en {execution_time:.1f} secondes")
            return True
        else:
            print(f"‚ùå {script_name} a √©chou√© (code de retour: {result.returncode})")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur lors de l'ex√©cution de {script_name}: {e}")
        return False

def run_all_analyses():
    """Ex√©cute toutes les analyses dans l'ordre recommand√©."""
    print("üöÄ Ex√©cution de TOUTES les analyses...")
    print("="*60)
    
    scripts = list_available_scripts()
    execution_order = ['2', '1', '3', '4', '5']  # Ordre recommand√©
    
    successful_scripts = []
    failed_scripts = []
    
    for script_key in execution_order:
        if script_key in scripts:
            script = scripts[script_key]
            print(f"\nüìä √âtape {execution_order.index(script_key) + 1}/5 : {script['name']}")
            
            if run_script(script['name']):
                successful_scripts.append(script['name'])
            else:
                failed_scripts.append(script['name'])
            
            print()  # Ligne vide pour la lisibilit√©
    
    # R√©sum√© final
    print("="*60)
    print("üìã R√âSUM√â DE L'EX√âCUTION")
    print("="*60)
    print(f"‚úÖ Scripts r√©ussis ({len(successful_scripts)}):")
    for script in successful_scripts:
        print(f"  - {script}")
    
    if failed_scripts:
        print(f"\n‚ùå Scripts √©chou√©s ({len(failed_scripts)}):")
        for script in failed_scripts:
            print(f"  - {script}")
    
    print(f"\nüìÅ R√©sultats disponibles dans les dossiers :")
    for script_key in execution_order:
        if script_key in scripts:
            script = scripts[script_key]
            print(f"  - {script['output_dir']} ({script['name']})")

def main():
    """Fonction principale du lanceur."""
    print("üéØ Lanceur d'analyses de donn√©es")
    print("Version 1.0 - Analyse compl√®te des donn√©es CSV")
    
    # V√©rifier les pr√©requis
    if not check_prerequisites():
        return
    
    while True:
        display_menu()
        
        choice = input("üéØ Votre choix : ").strip().upper()
        
        if choice == 'Q':
            print("üëã Au revoir !")
            break
        
        elif choice == 'A':
            run_all_analyses()
            break
        
        elif choice in ['1', '2', '3', '4', '5']:
            scripts = list_available_scripts()
            script = scripts[choice]
            
            print(f"\nüéØ Ex√©cution de : {script['name']}")
            print(f"üìù Description : {script['description']}")
            
            confirm = input("‚úÖ Confirmer l'ex√©cution ? (o/N) : ").strip().lower()
            if confirm in ['o', 'oui', 'y', 'yes']:
                run_script(script['name'])
            else:
                print("‚ùå Ex√©cution annul√©e")
        
        else:
            print("‚ùå Choix invalide. Veuillez r√©essayer.")
        
        input("\n‚è∏Ô∏è Appuyez sur Entr√©e pour continuer...")

if __name__ == "__main__":
    main() 